网络编程  

ISO ----》 国际标准化组织 

OSI 七层模型

应用层 ： 提供用户服务， 例如传输文件，数据管理，邮件首发

表示层 ： 做数据的转换和解压

会话层 ： 建立进程间的连接，决定使用什么传输层协议

传输层 ： 提供传输服务 根据应用层的要求选择合适的传输服务并且           提供流量控制   UPD   TCP

网络层 ：提供路由选择网络互联

链路层 ： 提供路由数据的交换，实际发送消息到网络

物理层 ： 网络交换设备，传输介质，网卡网口的选择

七层 ----- 》 

四层    

应用层   （包含应用层  表示层  会话层）
传输层
网络层
物理链路层 （包含链路层和物理层）

五层（TCP/IP模型）

应用层   （包含应用层  表示层  会话层）
传输层
网络层
链路层 
物理层

协议 ：网络协议 即在网络传输过程中为保证通信正常而制定的都遵守的约定

应用层协议 ： TFTP  DNS FTP   SMTP   HTTP
传输层     ： TCP  UDP
网络层     ： IP  ARP  ICMP 
物理链路层 ： IEEE 

网络知识 

主机   主机名称 （计算机名，域名）
host
       本地主机表示方法 ： IP  
			 'localhost'   127.0.0.1   表示本机通信地址

			  0.0.0.0                  表示在局域网内的可用主机IP
			  172.60.50.218            表示本机在网络上的标识

获取主机名称
import socket
socket.gethostname()
'tedu'

In [3]: socket.gethostbyname('tedu')
Out[3]: '127.0.1.1'

In [4]: socket.gethostbyname('localhost')
Out[4]: '127.0.0.1'


IP 地址

IPV4		点分十进制    192.168.1.5 
				三个点将IP分为四个部分每部分取值 0--255
				
				二进制    8 * 4   32位2进制表示

IPV6  更多可用的IP

192.168.1.0   该网段
192.168.1.1   网关地址
192.168.1.255  广播地址 

ping 172.60.50.62  查看是否可以访问某台主机

gethostbyaddr()  查看主机的信息

In [7]: socket.gethostbyaddr('www.baidu.com')
Out[7]: ('127.0.0.1', [],     ['119.75.213.61'])
					主机名     主机别名   主机地址

IP地址转换为二进制

inet_aton 将地址十进制转换为二进制
In [8]: socket.inet_aton('192.168.1.2')
Out[8]: b'\xc0\xa8\x01\x02'

inet_ntoa 将地址二进制转换为十进制
In [9]: socket.inet_ntoa(b'\xc0\xa8\x01\x02')
Out[9]: '192.168.1.2'

区别 ： 这两个函数有第一个参数 AF_INET表示转换IPV4类的地址
        AF_INET6表示转换IPV6类的地址
inet_pton(socket.AF_INET,'192.168.1.2')
inet_ntop()

域名 ： 或联网服务器IP的名字，方便使用

端口号 ： 是地址的组成部分，用于在一个系统中区分应用层程序

取值范围  1 -- 65535   
使用 1-255 是众所周知的端口  256-1023 系统进程占用  
1024--49151 登记端口  49152-65535 私有端口或者动态端口

推荐   >10000   8888   6666   9999 

获取系统中某个网络服务程序的端口号
In [6]: socket.getservbyname('ssh')
Out[6]: 22

In [7]: socket.getservbyname('http')
Out[7]: 80


子网掩码 ： 与IP 配合使用用来确定当前的网段

字节序 
小端序 ： 低序字节存在低地址位
大端序 ： 高序字节存在低地址位 

网络统一 ： 网络字节序  保证不同的主机按照相同方式发送接受解析数据

总结：
OIS 七层模型    五层 和 四层  每一层模型的功能
消息在网络中的传递大致流程
什么是主机 
什么是协议，协议起什么作用
什么是 ip地址  
什么是端口
什么是子网掩码 ，域名 和 字节序

传输层 提供的通信类型

1. 面向连接的可靠服务  ---》 TCP协议 

tcp协议中规定 ： 传输服务必须建立连接
			   传输数据必须保证可靠
               传输结束必须断开连接
								 

建立连接（三次握手）

客户端向服务端发送连接请求 （发送一个试探性的标志字符给服务器）
服务器端接受到请求后告知客户端可以连接

再次告知服务器客户端已经收到回复，下面要 开始发送具体消息

数据的可靠性 ： 无重复  无丢失  无失序  无错误

断开连接过程（四次挥手）

主动放发送标志告知被动方要断开连接

被动方返回相应的标志信息告知主动放我已经接受到你的请求

被动方会再次发送标志位信息表示已经准备就绪可以断开

主动方断开连接告知被动方

使用情况 ： 对传输质量要求较高，需要可靠的传输。
            传输的数据量较大（比如传文件）不需要频繁的连接断开 
					比如： qq消息，邮件发送，文件上传，账户登录

2. 面向无连接的不可靠的服务   UDP协议

不保证数据的完整性
数据的发送都是由发起端决定的，不考虑接收端的情况
没有三次握手和四次挥手的过程

使用情况 ： 对实时性要求较高
						网络情况不佳的时候
						对数据的准确性没有严格要求
						建立必要的非连接的情况（比如广播组播）


套接字  （网络间进行通信的方式的名称）

在linux中演化为一种文件类型 socket

套接字的分类 

流式套接字  ： 表示传输层使用tcp协议提供面向连接的传输服务 

数据报套接字 ： 表示传输层使用udp协议提供面向无连接的传输服务 

原始套接字：一般用作底层协议测试  （用不到）


基于tcp协议的socket编程

服务端
1. 创建一个tcp流式套接字

socket(family = AF_INET,type = SOCK_STREAM,proto = 0)
功能 ： 创建一个套接字
参数 ： family  协议族类型    （AF_INET   UNIX）
				type    套接字类型   SOCK_STREAM   tcp流式套接字
														 SOCK_DGRAM    udp数据报套接字
														 SOCK_RAM
				proto   子协议选项   一般为0 
返回值 ： 套接字对象


2. 绑定本机的IP和端口号

bind(address)
功能：绑定本机的IP和端口号
参数: 是一个包含两个元素的元组，元组的第一个元素是主机名，第二个是使用的端口号
e.g.   ('',8888)  ('localhost',8888)  ('127.0.0.1',8888)
				('0.0.0.0',8888)  ('172.60.50.218',8888)
			
3. 将套接字变为可监听套接字 

listen(n)
功能 ： 将套接字设置为监听套接字，并且设置一个连接等待队列
参数 ： 是一个正整数 >=1

4. 套接字等待客户端请求
accept()
功能 ： 阻塞等待客户端的连接 
参数 ： 无
返回值 ： 第一个返回值为 和客户端交互的新的套接字
          第二个返回值为 连接进来的客户端的address

5. 消息的收发
recv(buffer)
功能 ： 接收网络消息
参数 ： 正整数 表示一次接收从缓冲区中拿到的消息的字节数
返回值：返回接收到的消息
* 当接受的网络缓冲中没有内容时会阻塞
* 当连接断开后，recv会结束阻塞返回一个空字串

send(data)
功能 ：发送网络消息
参数 ： 要发送的内容  
返回值 ： 实际发送的字节数
*python3 中要求send的内容必须为 bytes格式

sendall(data)
功能 ： 发送网络消息
参数 ： 要发送的内容 要求为bytes格式
返回值 ： 如果成功发送返回None 发送失败报异常


6. 关闭套接字
close() 
功能 ： 关闭一个套接字

客户端

connect(address)
功能 ： 向服务器发起连接请求
参数 ： address 是一个元组 即为要连接的服务器的地址

主要点
1.客户端要和服务器端的套接字类型相同
2.客户端就是用创建的套接字和服务器交互
3.recv和send要与服务器配合，避免 recv死阻塞

* TCP 循环服务不能满足多个客户端同时发送请求的情况
  它不允许摸个客户端单独长期占有服务器资源

作业 ： 

自己把tcp服务器客户端代码写出来 

网络概念描述










