1、运算符
	1、算数运算符
		+，-，*，/，%，++，--

		++ ：自增运算符，在自身数据基础上只做+1操作
		-- ：自减运算符，在自身数据基础上只做-1操作
		语法：
			变量++ 或 ++变量
			变量-- 或 --变量

		++做前缀：
			对变量先自增，再使用
		++做后缀：
			先使用，再对变量自增
		ex:
			var num = 5;
			console.log(num++);输出5，变为6
			console.log(num);输出6

			var num = 5;
			console.log(++num);变为6，再输出6
			console.log(num);输出 6

			var num = 5;
			console.log(num++);//5    //输出5，变为6
			console.log(++num);//7    //变为7，输出7
			console.log(++num);//8    //变为8，输出8
			console.log(num++);//8    //输出8，变为9
			console.log(num);//9      //输出9

			var num = 5;
			        5(6)    (7)7    7(8)    8(9)    (10)10  10
			var r = num++ + ++num + num++ + num++ + ++num + num;
			r : 47  (5+7+7+8+10+10)
			num : 10
	2、关系运算符(比较运算符)
		>,<,>=,<=,==,!=,===,!==
		1、10 > 5 : true
		2、"10" > 5 : true 
			如果运算符两端有一个操作数是数字的话，那么另外一个也会自动通过Number()转换为数字，再进行比较
		3、"3" > 5 : false
			先将"3"通过Number()转换为数字，再与5进行比较
		4、"10a" > 5 : false
		5、"10a" < 5 : false
			先将 "10a" 通过Number()转换为数字，再与5比较
			但是 "10a" 通过Number()转换为数字，结果 NaN
			NaN 只有做 != 才是 true，其余比较都是false
		6、"张三丰">"张无忌" : false
			比较每位字符的Unicode码
			最终比较的是"三"和"无"之间的大小关系
			"三":19977
			"无":26080
		7、"10" > "5" : false
			比较的是 "1" 和 "0" 的ASCII码
		8、"50" > "5" : true

		=== 和 !==
		1、"5" == 5 : true
		===:
			比较的数据的数值和数据类型都相等的情况下，结果才为真
			
			"5" === 5 : false
			"5" === "5" : true
			5 === 5 : true
		!==:
			比较的数据的数值和数据类型，只要有一个不相等结果就为 true
	3、逻辑运算符
		作用：关联条件 或 对条件取反
		!:非，对现有条件取反 等同于 Python not
		&&:逻辑与，等同于 Python and
		||:逻辑或，等同于 Python or
		
		条件1 && 条件2
			1、条件1为true，条件2为true，整体结果为 true
			2、条件1为true，条件2为false，整体结果为false
			3、条件1为false，条件2为true，整体结果为false
			4、条件1和条件2均为false，整体结果为false
		条件1 || 条件2
			只要有一个条件为true，整体结果就为true

		!条件：
			非真即假，非假即真
		练习1：
			1、创建一个网页 
			2、从弹框中录入一个数据表示一个年份
			3、判断该年份是否为闰年，输出 true 或 false
			闰年：
				能被4整除但不能被100整除或能被400整除
				var isRun=year%4==0&&year%100!=0||year%400==0;
		练习2：
			从弹框中录入一个字符，判断该字符是什么字符

			从弹框中录入 ：你
			是数字吗?false
			是英文吗?false
			是汉字吗?true
	4、位运算符
		1、按位与 ：&
			3 & 5 
			3 : 011
			5 : 101
			===================
			    001   1

			使用场合：判断一个数字的奇偶性
				任意数字 与 1 做按位与操作，结果为1是奇数，结果为0是偶数

				5 & 1
				101
				001
				===========
				001  1

				6 & 1
				110
				001
				====
				000  0
		2、按位或 ：|
			任意小数与 0 做按位或操作，快速取整(抛弃小数位，保留整数位)
		3、按位异或 ：^
			3 ^ 5
			3:011
			5:101
			=======
			  110  : 6
			
			作用：在不借助第三方变量的前提下，快速交换两个数字的位置
			 var a = 3;
			 var b = 5;

			 a = a ^ b;
				3 : 011
				5 : 101
				========
				    110 : 6   a = 6
			 b = b ^ a;
				b=5 : 101
				a=6 : 110
				==============
				      011 : 3  b=3
			 a = a ^ b;
				a=6 : 110
				b=3 : 011
				=================
				      101 : 5  a=5
	5、条件运算符
		单目运算符 / 一元运算符 ：只有一个操作数的运算符
			如：++，--，!，-
		双目运算符 / 二元运算符 ：有两个操作数的运算符
			如：+，-，*，/，%，&，|，^，&&，|| ...
		三目运算符 / 三元运算符 ：需要三个操作数
			如：条件运算符 ? :
		
		条件运算符：
			条件表达式 ? 表达式1 : 表达式2;
			先判断条件表达式的结果，如果为true，则执行表达式1的内容，否则，执行表达式2的内容

			表达式1 和 表达式2 的位置处也可以是一个条件表达式
		练习：
			BMI 指数计算
			要求从弹框中录入身高(m)
			要求从弹框中录入体重(kg)
			BMI = 体重 / (身高 * 身高)

			如果 BMI 小于 18.5 属于偏瘦
			如果 BMI 大于 23.9 属于偏胖
			否则 ：正常
	6、 op = 
		var num = 5;
		num += 5; // num = num +5;

		var a = 3;
		var b = 5;

		a = a ^ b; a ^= b;
		b = b ^ a; b ^= a;
		a = a ^ b; a ^= b;
2、流程控制结构(分支结构，循环结构)
	1、程序的流程结构
		1、顺序结构
		2、分支结构(选择结构)
		3、循环结构
	2、分支结构
		1、作用
			根据条件，选择某一段代码去执行
		2、if 结构
			1、
				if(条件){
					语句块
				}
			2、
				if(条件){
					语句块1
				}else{
					语句块2
				}
			3、
				if(条件1){
					语句块1
				}else if(条件2){
					语句块2
				}else if(条件3){
					语句块3
				} ... else{
					语句块n
				}
			
			日期计算器：
			分三次从弹框中录入年，月，日
			计算该日是该年的第?天
		3、switch 结构	
			只能用在等值判断的场合中
			语法：
				switch(变量){
					case 值1:
						语句块1
						break; //可选，跳出switch结构
					case 值2:
						语句块2
						break; //可选，同上
					... ...
					default:
						语句块n;
						所有的case都未匹配上时，才执行default
				}
			注意：
				1、变量 和 各个case块后面的值，是使用===的方式来判断匹配的
				2、如果case后不增加break的恶化，则从匹配的case开始，向下依次执行(不判断)，直到结束或碰到break为止

			练习1：
				从弹框中输入 1-7 中的任意一个数字，表示星期1 ~ 星期日

				输入1 ：输出 今天吃红烧肉
				输入2 ：输出 今天吃红烧鱼
				输入3 ：输出 今天吃红烧排骨
				输入4 ：输出 今天吃红烧甲鱼
				输入5 ：输出 今天吃红烧皮皮虾
				输入6 ：输出 今天休息
				输入7 ：输出 今天休息
				其他 ：输入有误!
	3、循环结构
		1、循环的作用
			重复的执行相同或相似的代码
		2、循环二要素
			1、循环条件
			2、循环操作

			ex:
				1、想打印 100 遍的 Hello World
					条件：从第1遍开始，到第100遍结束
					操作：打印 Hello World
				2、打印1-100之间所有的数字
					条件：从第1遍开始，到第100遍结束
					操作：打印 条件 的值
		3、while循环
			1、语法
				while(条件){
					循环操作
				}

				ex:打印100遍的Hello World
					//表示循环条件，从1开始
					var i = 1; 
					while(i <= 100){
						console.log("Hello World");
						i++; // ++i; i+=1; i=i+1;
					}
				练习：
					1、打印 1-100之间所有的数字
						var i = 1;
						while(i <= 100){
							console.log(i);
							i++;
						}
					2、打印 1-100之间所有数字的和
						var i=1;
						var sum = 0;
						while(i <= 100){
							sum += i;
							i++;
						}
						console.log(sum);
					3、打印 1-100之间所有3的倍数的数字
						var i=1;
						while(i <= 100){
							if(i % 3 == 0){
								console.log(i);
							}
							i++;
						}

			问题：
				循环的从弹框中录入数据，并且将录入的数据打印在控制台上，直到输入 exit 为止
		4、do...while循环
			1、语法
				do{
					循环操作
				}while(条件);
			2、流程
				1、先执行循环操作
				2、判断循环条件
				3、如果条件为真，则继续执行循环操作，否则退出循环

			while 与 do...while的区别
				1、while
					先判断条件，再执行操作，最少一次都不执行
				2、do...while
					先执行循环操作，再判断循环条件，最少执行一次操作
	


	作业：
		1、使用循环结构改变日期计算器
		2、猜数字游戏(do...while)
			1、随机生成一个 1-100 之间的数字
				Math.random() : 返回一个0-1之间的随机数
			2、允许用户输入一个数字，与随机数进行比较
				1、比随机数大，提示猜大了，并重新输入
				2、比随机数小，提示猜小了，并重新输入
				3、与随机数相等，提示猜对了！退出游戏
				4、用户输入的exit也退出游戏






0 : 0
1 : 1
2 : 10
3 : 11
4 : 100
5 : 101
6 : 110
7 : 111

var year = prompt()
var month = Number(prompt())
var day = prompt()
var totalDays = 0;
//通过switch将month月前一个月到1月份所有的天数累加
swtich(month-1){
	case 11:
		totalDays += 30;
	case 10:
		totalDays += 31;
	case 9:
		totalDays += 30;
		... ...
	case 1:
		totalDays += 31;
}





