1900.1.1 星期一
1900.1.2 星期二
1900.1.7 星期日
1900.1.10 
1900.1.21 


1、1900 ~ year - 1 
	闰年 ：累加366天
	平年 ：累加365天
2、当前年 
	从1月开始 ，到month-1月为止 ，整月加
3、累加输入的 day

日	一	二	三	四	五	六
1		2		3		4		5		6		7 
8		9		10	11	12	13	14
... ...

日	一	二	三	四	五	六
						1		2		3		4 
5		6		7		8		9		10

=================================================
1、数组
	1、常用API
		1、toString()
			作用：将数组转换成字符串。

			var arr = ["zhang","wang","li"];
			console.log(arr);
			console.log("内容为:"+arr);
		2、join(seperator)
			作用：返回一个由seperator连接的数组的元素的字符串
		3、reverse()
			作用：反转
			注意：该函数会改变现有数组的结构

			练习：
				1、随意的从弹框中输入一个数字
				2、将该数字转换成二进制，并输出
		4、sort()
			1、作用：
				对现有数组的内容进行排序
				默认是按照元素的Unicode码进行排序的
			2、注意
				该函数会改变现有数组的内容
			3、允许通过自定义的排序规则(排序函数)来指定数字的排序方式
				语法：arr.sort(排序函数)
			
				1、升序的排序函数
					function sortAsc(a,b){
						return a - b;
					}

					1、将sortAsc 指定为排序函数
					2、数组会自动的将相邻的两个数字传递到参数的位置处
					3、如果返回值是 > 0的数字，则交换两个数字的位置，否则不变

					指定排序函数：
					arr.sort(sortAsc);
					

					练习：
						1、声明一个全局数组
						2、网页中创建两个按钮
							1、升序：点击时，在控制台上打印数组升序排序的效果
							2、降序：点击时，在控制台上打印数组降序排序的效果
				2、使用匿名函数指定排序规则
					1、指定升序的排序函数
						arr.sort( function(a,b){return a-b;} );
					2、指定降序的排序函数
						arr.sort(function(a,b){
							return b-a;
						});
		5、进出栈操作
			栈式操作：提供了快速操作数组头部和尾部元素的方法
			1、push()
				入栈，向数组尾部添加新元素，并返回新数组的长度
				等同于 ：arr[arr.length] = "";
			2、pop()
				出栈，删除并返回数组尾部的元素
			3、unshfit()
				向数组头部添加新元素并返回新数组的长度
			4、shift()
				删除并返回数组头部的元素
	2、二维数组
		1、什么是二维数组
			在一个数组中的每个元素又是一个数组
		2、声明二维数组
			var names = [
				["孙悟空","朱无能","沙悟净"],
				["潘金莲","马蓉","李小璐"]
			];

			取出 马蓉:
				var sub_names = names[1];
				var name = sub_names[1];
				或
				var name = names[1][1];
2、字符串 - string
	1、声明字符串
		var str1 = "字符串1";
		var str2 = String("字符串2");
		var str3 = new String("字符串3");
	2、length 属性
		作用：返回当前字符串中字符的个数
	3、常用函数 - String API
		1、大小写转换函数
			1、toUpperCase()
				返回字符串的完全大写形式
			2、toLowerCase()
				返回字符串的完全小写形式
			练习：
				1、创建一个数组，并初始化若干数据(由英文大小写，以及0-9数字组成)
				2、生成一个四位随机验证码
					数据从数组中获取
				3、将随机生成的字符串通过prompt()展示给用户看
				4、比较用户输入的与生成的验证码是否一致并给出提示(忽略大小写)
		2、获取指定位置的字符 或 字符的Unicode码
			1、获取指定位置的字符
				函数：charAt(index)
				ex:
					var str = "Hello World";
					var s = str.charAt(3);
					console.log(s); // l
					console.log(str.charAt(6)); // W
			2、获取指定位置字符的Unicode码
				函数：charCodeAt(index)
				ex:
					var str = "Hello World";
					var r1 = str.charCodeAt(3);
					console.log(r1); // l的Unicode码
		3、检索字符串
			1、indexOf(value,fromIndex)
				value:要查找的子字符串
				fromIndex:从哪个位置处开始查找，如果省略，则从第一个字符处开始查找
				返回值：返回子字符串第一次出现的下标，如果没有查询到子字符串的话，则返回 -1

				var str = "Hello World";
				var r = str.indexOf("ll");
				console.log(r); //2
			2、lastIndexOf(value,fromIndex)
				作用：查找value最后一次出现的下标
				注意：该函数的查找方式是从后向前找
			练习：
				判断一个字符串是否满足邮箱的格式
					zhangsanfeng@163.com
					sanfeng.zhang@163.com
				1、字符串中必须包含@符号
				2、字符串中必须有 . 符号
				3、最后一个 . 必须在 @ 之后
		4、截取子字符串
			函数：substring(start,end)
			作用：返回从start到end-1之间的字符串，如果省略end的话，则截取到整个字符串的尾部

			练习：
				1、从指定邮箱中截取用户名
					sanfeng.zhang@163.com
				2、从指定邮箱中提取服务商的名称
					sanfeng.zhang@163.com
					sanfeng.zhang@qq.com
				3、从指定的身份证号中提取生日
					220102199901023316
					生日：1999年01月02日
		5、分割字符串
			函数：split(seperator)
			作用：使用seperator对字符串进行拆分，并返回拆分后的数组
			ex:
				var str = "1001_5&1002_4&1003_1";
		6、模式匹配
			1、作用
				配合着 正则表达式 完成字符串的查找，替换..
			2、正则表达式
				约束字符串格式的表达式
				语法：
					/正则格式/修饰符

					修饰符:
						i:ignorcase(忽略大小写)
						g:global(全局匹配)
						m:multiple(允许多行匹配)
					ex:
						1、/\d{2,6}/g
						2、/你大爷/g
			3、函数
				1、replace(substr/regexp,replacement)
					在一个字符串中，将substr或满足regexp格式的字符串替换成 replacement

				2、match(substr/regexp)
					按照指定的子字符串或正则表达式进行匹配，并返回满足格式的子字符串(数组)

				练习：
					Microsoft is a big company,microsoft's color is red and has MICROSOFT logo like microsoft
					1、将所有的 microsoft(大小写)都替换成微软
					2、输出 共替换了多少处
3、其他内置对象
	1、JS对象概述
		JS中对象的分类：
			1、内置对象 - ES定义
			2、外部对象
				1、window(BOM)
				2、document(DOM)
			3、自定义对象 - function

		对象：包含属性 和 方法(函数)
			对象.属性
			对象.方法()
	2、RegExp 对象
		RegExp:Regular Expression - 正则表达式
		1、创建RegExp对象
			1、var regExp = /匹配模式/修饰符;
				var regExp = /你大爷/g;
			2、var regExp = new RegExp("匹配模式","修饰符");
		2、RegExp对象的常用方法
			1、test(string)
				string:要验证的字符串
				如果string满足regExp对象的格式的话，则返回true，否则返回false
	3、Math 对象
		1、作用
			执行与数学相关的运算和数据
		
		2、属性
			Math.PI 
			Math.E

		3、方法
			1、三角函数
				Math.sin()
				Math.cos()
				Math.tan()
			2、计算函数
				Math.sqrt(x) : 开平方
				Math.log(x) : 求对数
				Math.pow(x,y) : 求 x 的 y 次方
			3、数值函数
				Math.abs(x) : 获取x的绝对值
				Math.max(a,b,c,d) : 获取最大值
				Math.min(a,b,c,d) : 获取最小值
				Math.random() : 生成随机数(0-1)
				Math.round(x) : 将x四舍五入到整数
	4、Date 对象
		1、作用
			获取客户端的日期时间
		2、创建Date对象
			1、获取当前日期时间
				var date = new Date();
			2、初始化自定义日期时间对象
				var date = new Date("2018/04/20 17:25:35");
		3、方法
			1、读取 或 设置当前时间的毫秒数
				1、getTime()
					返回自1970-1-1 00：00：00 到 date 所经过的毫秒数
				2、setTime(毫秒数)
					根据给定的毫秒数，结合 1970-1-1 计算日期时间
			2、读取时间分量
				1、getFullYear()
					获取当前时间对象的年份
				2、getYear()
					返回自1900年以来，到当前日期对象所经过的年数
				3、getMonth()
					返回0-11的数字来表示1-12月
				4、getDate()
					返回当前时间日期对象的日
				5、getDay()
					返回当前时间日期对象是星期 ?
					返回 0-6 表示 星期日 - 星期六
				6、获取时间
					getHours() : 获取小时
					getMinutes() : 获取分钟
					getSeconds() : 获取秒
					getMilliseconds() : 获取毫秒
				7、转换为字符串
					1、toString()
					2、toLocaleString()
						转换成本地时间字符串
					3、toLocaleTimeString()
						转换成本地时间字符串(时分秒)
					4、toLocaleDateString()
						转换成本地日期字符串(年月日)
			
			作业：
				1、获取当前系统的日期时间
				2、按照以下格式进行输出
					xxxx年xx月xx日 xx时xx分xx秒 星期[五]

					2018年04月20日 08时05分13秒 星期五
