1、jQuery删除节点
	1、remove()
		语法：$obj.remove();
		作用：删除$obj元素
	2、remove("selector")
		语法：$obj.remove("selector");
		作用：将满足selector选择器的元素删除出去
	3、empty()
		语法：$obj.empty()
		作用：清空$obj内的内容
2、jQuery动画
	1、基本显示 / 隐藏
		语法：
			$obj.show() / $obj.show(执行时间);
			$obj.hide() / $obj.hide(执行时间);

	2、滑动式 显示/隐藏
		语法：
		显示：$obj.slideDown() / $obj.slideDown(执行时间)
		隐藏：$obj.slideUp() / $obj.slideUp(执行时间)
	3、淡入淡出式显示/隐藏
		语法：
			$obj.fadeIn() / $obj.fadeIn(执行时间) 显示
			$obj.fadeOut() / $obj.fadeOut(执行时间) 隐藏0
3、jQuery - 插件
=================================================
Django 框架
1、WEB 与 服务器
	1、WEB ：表示用户可以浏览的网页内容(HTML,CSS,JS)
	2、服务器 
		能够给用户提供服务的机器
		1、硬件 与 软件
			硬件范畴：一台机器
			软件范畴：一个能够接收用户请求并给出响应的程序
				1、APACHE
				2、TOMCAT
				3、IIS
				4、Nginx
		2、作用
			1、存储WEB所需要的信息(HTML,图片,音频,...)
			2、能够处理用户的请求(request),并给出响应(response)
			3、执行服务器端的程序 ：查找数据库、处理数据

		3、服务器 与 WEB之间的关系

		4、Django 框架
			1、作用
				使用 python 语言开发服务器端处理程序
2、框架
	1、什么是框架
		框架是一个为了解决开放性问题而存在的一种结构。框架本身提供一些最基本的功能。我们只需要在基础功能上搭建属于自己的操作即可。
	2、Python 中的框架
		1、Django ：重量级的 WEB 框架
		2、Tornado ：异步框架
		3、Flask ：轻量级框架
		... ...
3、Django 框架
	1、什么是Django
		是一个开源框架，2005年发布，采用Python语言开发。早期是做新闻以及内容管理的网站的。提供了非常强大的后台管理系统。
	2、Django 的框架模式 - MTV
		M ：Models 层
			模型层，负责数据库的建模以及CRUD的操作
		T ：Templates 层
			模板层，用于处理用户显示的内容的 如：html
		V ：Views 层
			视图层
			处理与用户交互的部分内容，从模型中获取数据，再将数据发送给模板，显示给用户
		
		自行了解：MVC
			M ：Models
			V ：Views
			C ：Controller(控制器)
4、Django 框架的使用
	1、Django的安装
		1、查看已安装的Django版本
			1、进入到终端 以及 Python 的交互模式
				python3 / ipython3
			2、交互模式中 输入 import django
				如果未报错：说明已经安装过
				如果报错：说明未安装
			3、查看已安装的版本
				交互模式中：django.VERSION
		2、安装
			1、在线安装 - 使用 pip / pip3
				sudo pip3 install django
				(默认安装Django的最高版本)

				sudo pip3 install django==1.11.8
				(指定安装1.11.8版本)
			2、离线安装
				1、下载所需要的Django包
				2、在环境中解压 Django 包 
					tar -xvf Django-1.11.8.tar.gz
				3、进入到 Django-1.11.8 
					cd Django-1.11.8
				4、安装
					sudo python3 setup.py install
		
		Django官网：http://www.djangoproject.com
		Djangobook：http://djangobook.py3k.cn/2.0/
	2、使用 Django
		1、创建Django项目
			mkdir Django -- 创建目录，用于保存项目(可选)

			使用 django-admin 指令，创建Django项目
				django-admin startproject 项目名
		2、启动服务，用于访问
			在创建好的项目中，找到 manage.py 文件
			通过 manage.py启动项目(服务)
			python3 manage.py runserver

		3、访问网站
			启动服务之后，在浏览器中，通过以下网址访问:
			http://localhost:8000
			http://127.0.0.1:8000
	3、Django项目结构介绍
		1、manage.py
			负责执行django中的各项操作的文件
			如：
				启动服务
				创建应用
				数据库的同步
		2、主文件夹(名称与项目名称相同)
			1、__init__.py
				项目初始化文件，每当服务器启动的时候，都会自动执行
			2、urls.py
				项目的基础url(路由)配置文件
			3、wsgi.py
				应用服务器配置文件，暂时不用
			4、settings.py
				项目的主设置文件:应用，模板，数据库，语言，时区，... ...
				1、BASE_DIR : 获取当前项目的绝对路径
				2、DEBUG : 调试模式
					开发过程：推荐使用 True
					上线运行：必须改为 False
				3、ALLOWED_HOSTS
					设置允许访问本项目的地址列表。
					如果不设置的话，只有本机(localhost/127.0.0.1)能访问。
					推荐写 '*',任何表示该机器的地址都可以访问当前项目 

					python3 manage.py runserver 0.0.0.0:8888
				4、INSTALLED_APPS
					指定已安装的应用，如果有自定义的应用的话，需要在此注册
				5、MIDDLEWARE:注册中间件
				6、ROOT_URLCONF:指定项目的基础路由配置文件
				7、TEMPLATES:指定模板的信息
				8、DATABASES:指定数据库的信息
				9、LANGUAGE_CODE:指定语言，允许修改为zh-Hans
				10、TIME_ZONE:指定时区，建议改为 Asia/Shanghai
	4、URL的使用
		1、urls.py
			默认在主文件夹中，主路由位置文件，包含所有的地址映射。
			每一个请求到达之后，都会由urls.py中的 urlpatterns 列表中的 url() 进行匹配
			
			url() 函数匹配上之后，可能将请求转交给其他的 Views(视图) 或 其他的 ulrs.py 去处理
		2、测试
			1、在项目主文件夹中，创建 views.py
				作用：包含所有定义好的视图(处理程序)
		3、url函数
			url函数的语法
			url(regex,views,kwargs=None,name=None)
			1、regex
				正则表达式模板，匹配请求的 url
			2、views
				URL处理的视图函数
			3、kwargs
				字典，用来向views传参的，没有参数可以省略
			4、name
				字符串，给 url() 起别名，主要在模板中使用
		4、通过 url 向 views 传参
			1、使用正则表达式传参
				使用子组传参，一个子组是一个参数，想传递多个参数的话，可以使用多个子组
				子组 - ()

				urlpatterns = [
					# 访问路径是 run 的时候，交给 run_views
					url(r'^run/$',run_views),
					# 访问路径是 fun 的时候，交给 fun_views
					url(r'^fun/$',fun_views),
					# 访问路径是 fun/两位数字 ，交给 fun_args_views 去处理
					url(r'^fun/(\d{2})/$',fun_args_views),
					# 访问路径是 fun/四位数字/两位数字
					url(r'^fun/(\d{4})/(\d{2})/$',fun_args1_views)
				]
				注意：
					1、在 url() 中，一个子组()表示一个参数
					2、在views.py中，对应的处理函数要根据url()中子组的个数，相应的定义参数。定义的参数要位于request之后
			2、使用 url() 第三个参数 ，字典传参
				urlpatterns = [
					url(
						r'^show/$',
						show_views,
						{'name':'zsf','age':'25'})
				]

				views.py 
				def show_views(request,name,age):
					name 的值是 zsf
					age 的值是 25
				注意：
					1、视图处理函数中，必须声明参数
					2、参数的名称和位置，必须要与字典中的名称和位置保持一致
5、Django 中的应用
	1、什么是应用
		应用就是网站中的一个独立的模块程序
		在Django中，主目录一般不处理用户的请求，主要做的是项目的初始化以及请求的分发
	2、创建应用
		1、命令
			./manage.py startapp 应用名称
			ex:
				./manage.py startapp news
		2、在 settings.py 中进行注册
		 在 INSTALLED_APPS 中追加应用名称
		 INSTALLED_APPS = [
			'django.contrib.admin',
			.... ....,
			'news',
		 ]
		3、应用的结构组成
			1、migrations 目录
				存放数据库中间文件的目录(日志文件)
			2、__init__.py
				应用的初始化文件
			3、admin.py
				应用的后台管理配置文件
			4、apps.py 
				应用的属性配置文件，不需改动
			5、models.py
				Models 文件
			6、tests.py
				测试模块
			7、views.py
				定义视图的文件
		练习：
			1、创建 index 应用，并注册
			2、创建 sport 应用，并注册
			3、创建 music 应用，并注册

		作业：
			1、访问 
				http://localhost:8000/sport/index
				交给 sport 应用中的 urls 处理(找index_views视图)
			2、访问
				http://localhost:8000/music/index
				交给 music 应用中的 urls 处理(找index_views视图)
			3、访问
				http://localhost:8000/
				交给 index 应用中的 urls 处理(找index_views视图)



http://localhost:8000/news/xxx/xxx/xx
http://localhost:8000/news/xx
一律都交给 news 应用的 urls.py 去处理

http://localhost:8000/music/xxx/xx/xx
http://localhost:8000/music/xx
一律都交给 music 应用的 urls.py 去处理








http://localhost:8000/fun/1
http://localhost:8000/fun/2
