1、模型
	1、自定义类 必须继承自 models.Model
	2、编写属性 - 列
		属性名 = models.字段类型(字段选项)

		ex:
			class Author(models.Model):
				name = models.CharField(max_length=30)

	3、ImageField 的使用
		pic = models.ImageField(upload_to='static/upload/xxx')
		upload_to:指定图片的上传路径
			static/upload/xxx
				项目根目录处的static目录中的upload目录中的xxx目录

	练习：
		完善 FruitDay 中的 models
		1、用户Models，商品类型Models，商品Models
		2、用户Models - Users
			1、电话号码 - uphone
			2、密码 - upwd
			3、电子邮件 - uemail
			4、用户名 - uname
			5、启用/禁用 - isActive (默认值为 true)
		3、商品类型Models - GoodsType
			1、类型名称 - title
			2、类型图片 - picture，默认上传路径:static/upload/goodstype
			3、类型描述 - desc
		4、商品Models - Goods
			1、商品名称 - title
			2、商品价格 - price (DecimalField)
			3、商品规格 - spec
			4、商品图像 - picture，默认上传路径:static/upload/goods
			5、销售状态 - isActive(默认值为true)

===============================================
1、Models - 模型
	1、数据的版本切换
		1、./manage.py migrate
			执行所有应用中最新版本的 数据库中间文件
		2、./manage.py migrate 应用名称 版本号
			./manage.py migrate index 0002
			执行 index 应用中 版本号为 0002的中间文件
	2、通过数据库自动导出Models
		./manage.py inspectdb > 文件名.py
2、模型中的 CRUD
	所有的操作均在 视图中(Views) 执行
	1、通过ORM向DB中增加数据
		1、Entry.objects.create(属性=值,属性=值)
			Entry:具体要操作的Models类

			ex:
				Author.objects.create(name='sf.zhang',age=85)

		2、创建一个 Models 对象，并通过 save() 完成增加
			obj = Entry(属性=值,属性=值)
			obj.save()
		3、使用字典构建对象，并调用其 save() 完成增加
			dic = {
				'属性1':'值1',
				'属性2':'值2',
			}

			obj = Entry(**dic)
			obj.save()
		练习：
			使用三种方式 分别向 index_book,index_publisher 中各增加三条数据
	2、查询操作(重难点)
		通过 Entry.objects 调用查询接口
		1、基本查询操作
			语法：all()
			用法：Entry.objects.all()
			返回: QuerySet (查询结果集，封装了若个字典的一个列表)
			ex:
				authors = Author.objects.all();
				等同于：select * from [index_author];
		2、查询指定列操作
			语法：values('列1','列2',...)
			用法：Entry.objects.values('列1','列2')
			返回：QuerySet
			ex:
				Author.objects.values('name','age')
				等同于：select name,age from index_author
			注意：
				values() 可以用在所有的查询结果集的方法的后面

				Author.objects.all().values('列1','列2')
		3、order_by()
			作用：排序
			语法：order_by('-列1','列2',...)
				列前加 "-" 表示降序
			用法：
				Entry.objects.order_by('列')
				Entry.objects.all().order_by('列')
			ex:
				Author.objects.order_by('-age')

		4、对条件取反
			语法：exclude()
			用法：Entry.objects.exclude(条件)
			ex:
				1、Author.objects.exclude(id=3)
					select * from author where not (id=3)
				2、Author.objects.exclude(id=3,age=85)
					select * from author where not (id=3 and age = 85)
		5、根据条件查询部分行数据(重难点)
			语法：filter(参数)
			用法：Entry.objects.filter(参数)
			1、使用 Entry 中的属性作为查询参数
				多个参数的话，使用 , 隔开，映射到sql语句中使用 and 进行关联的
				ex:
					1、Author.objects.filter(id=1)
						select * from author where id=1
					2、Author.objects.filter(id=1,name='莫言')
						select * from author where id=1 and name='莫言'
			2、通过 Filed Lookups(查询谓词) 完成复杂条件
				查询谓词：每个查询谓词都是一个独立的查询条件，可以用在所有的 有查询条件的位置处
				1、__exact
					作用：等值判断
					用法：Entry.objects.filter(属性__exact=值)
					ex:
						Author.objects.filter(id__exact=1)
						select * from author where id=1
				2、__contains
					作用：判断属性中是否包含指定关键字
				3、__lt
					作用：判断属性值 小于 指定值的所有数据
				4、__lte:
					作用：判断属性值小于等于指定值的
				5、__gt:
					作用：判断属性值大于指定值的
				6、__gte:
					作用：判断属性值大于等于指定值的
				7、__startwith
					作用：判断属性值是以 ** 开头的
					用法：Entry.objects.filter(列__startwith='xx')
					sql:select * from author where 列 like 'xx%'
		6、查询只返回一条数据
			语法：get(条件)
			用法：Entry.objects.get(查询条件/谓词)
			注意：
				该函数只适用于 返回一条记录时使用
	3、修改数据
		1、修改单个数据
			1、通过 get() 得到要修改的实体对象
			2、通过实体对象的属性修改属性值
			3、再通过实体对象的save()保存回数据库

			au = Author.objects.get(id=1)
			au.name = '王宝强'
			au.age = 35
			au.save()
		2、批量修改数据
			调用查询结果集的update()即可
			Author.objects.all().update(属性=值,属性=值)

			Author.objects.all().update(age=75)
	4、删除数据
		调用实体对象/查询结果集 的 delete() 即可
		1、删除单个对象
			obj = Author.objects.get(id=1)
			obj.delete()
		2、删除多个对象(结果集)
			authors = Author.objects.all()
			authors.delete()

		练习：
			完成删除操作
			1、点击删除时，跳转到 delete_views 视图中
				http://localhost:8000/07_delete/ID
			2、在 delete_views中，接收一个参数，表示要删除的用户的ID
			3、在视图中，将该ID对应的用户删除出去

		作业1：
			在查询列表的基础上完成下列操作
			1、点击修改时，将该用户显示在 04_au.html 上
			2、每个数据都用文本框显示

		作业2：
			改版删除操作
			1、在 Author 实体中增加一个属性 isActive ，默认值为 True
			2、在查询列表页面中，点击删除时，将要删除的用户的 isActive 更改为 False
			3、查询所有数据时，查询 isActive 为 True的用户，并显示在查询列表页面上




select name,age,email from index_author


<QuerySet [<Author: Author object>, <Author: Author object>, <Author: Author object>]>

[
	<Author: Author object>, 
	<Author: Author object>, 
	<Author: Author object>
]

莫言, 65 , moyan@163.com
老舍, 70 , laoshe@163.com
郭敬明, 85 , xiaosi@163.com


<QuerySet [{'name': '莫言', 'age': 65}, {'name': '老舍', 'age': 70}, {'name': '郭敬明', 'age': 85}]>

		

