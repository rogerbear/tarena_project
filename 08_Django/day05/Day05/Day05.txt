1、转发 与 重定向
	1、转发
	2、重定向
		1、什么是重定向
			重新向新的访问地址发送请求(服务器端)
		2、语法
			return HttpResponseRedirect(地址)
2、ORM 操作
	1、F操作 和 Q操作
		1、F() 
			update author set age=age+10

			Author.objects.all().update(age=age+10) # 错误

			作用：用于在执行中获取某列的值
			语法：F('列名')

			from django.db.models import F
			Author.objects.all().update(age=F('age')+10)
		2、Q()
			Author.objects.filter(id=1,age=35)
			select * from author where id=1 and age=35

			作用：在查询条件中，可以完成 或(or) 的操作
			语法：
				from django.db.models import Q
				Q(表达式)|Q(表达式)
			
			# 查询 id为1 或 年龄 大于等于 85 的人的信息
			Author.objects.filter(Q(id=1)|Q(age__gte=85))
			select * from author wehre id=1 or age >= 85
	2、原生的数据库操作方法
		1、查询
			函数：raw(sql语句)
			语法：Entry.objects.raw(sql)
			返回：QuerySet
		2、增删改
			def doSQL(request):
				with connection.cursor() as cursor:
					sql = 'delete from author where ...'
					cursor.execute(sql)
					return ... ...
3、使用后台管理 Models
	1、后台的配置
		登录地址：localhost:8000/admin
		
		创建后台管理员
		./manage.py createsuperuser
		Username: 输入用户名，默认为 tarena
		Email Address: 电子邮件地址，
		Password:密码
		Password(again):重复密码

	2、基本管理
		1、在应用中的 admin.py 中注册要管理的数据
			1、admin.py
				作用：注册需要管理的Models，只有在此注册的Models才允许被管理
			2、注册Models
				from .models import *
				admin.site.register(Entry1)
				admin.site.register(Entry2)
		2、修改 models.py 处理显示内容
			1、在 models.py 中的各个 class 追加
				def __str__(self):
					return self.name
			
			2、通过 Models 类的内部类 Meta 定义其展现形式
				class Author(models.Model):
					... ... ...
					... ... ...
					... ... ...

					class Meta:
						1、db_table 
							指定该实体类对应到表的名称
						2、verbose_name
							定义该实体类在 admin 中显示的名字(单数)
						3、verbose_name_plural
							效果同上，是复数形式
						4、ordering
							指定显示的数据们的排序规则，取值是一个列表，默认是升序排序，降序的话则使用 "-"
					练习：
						1、修改 Publisher 的 Meta
							1、更改表名为 publisher
							2、修改展示名称 "出版社"
						2、修改 Book 的 Meta
							1、更改表名为 book
							2、修改展示名称 "书籍"
							3、指定排序 - 按照出版时间降序排序
	3、高级管理
		1、在 admin.py中创建高级管理类
			1、定义 EntryAdmin 类，继承自admin.ModelAdmin
				class AuthorAdmin(admin.ModelAdmin):
					pass
			2、注册 高级管理类
				admin.site.register(Entry,EntryAdmin)
				ex
					admin.site.register(Author,AuthorAdmin)
		2、允许在 EntryAdmin 中增加的属性
			1、list_display
				作用：指定在 列表页 中能够显示的字段们
				取值：由属性名组成的元组或列表
				ex:
					list_display = ('name','age','email')

			2、list_display_links
				作用：定义在列表也中能够连接到详情页的字段们
				取值：由属性名组成的元组或列表
				注意：取值必须出现在 list_display 中

			
			3、list_editable
				作用：指定在列表页中就允许修改的字段们
				取值：由属性名组成的列表或元组
				注意：取值不能出现在list_display_links 中

			4、search_fields
				作用：添加允许被搜索的字段们
				取值：由属性名组成的元组或列表

			5、list_filter
				作用：在列表页的右侧增加过滤器，实现快速筛选
				取值：有属性名组成的元组或列表

			6、date_hierarchy
				作用：在列表页顶部增加时间选择器，所以取值必须是DateField 或 DateTimeField 的列
			
			7、fields
				作用：在详情页面中，指定显示哪些字段们，并按照什么样的顺序显示
				取值：由属性名组成的元组或列表

			8、fieldsets
				作用：在详情页面中，对字段们进行分组显示
				注意：fieldsets 不能与 fields 共存的
				语法：
					fieldsets = (
						(
							'分组名称',{
								'fields':('属性1','属性2'),
								'classes':('collapse'),
							}
						),
					)

				
			练习：
				为 Publisher增加高级管理功能
				1、在 列表页中显示 name,address,city 属性
				2、address 和 city 是可编辑的
				3、右侧曾加一个过滤器，允许按照 address 和 city 进行筛选
				4、分组显示
					name,address,city 为"基本选项"
					country,website 为"可选选项"，并可以折叠
4、关系映射 - Django中的连接查询
	1、一对一映射
		1、什么是一对一
			A表中的一条记录只能与B表中的一条记录相关联
			典型代表：一夫一妻制
			数据库中实现：
				A表：设置 主键
				B表：增加一列，并引用自A表的主键，还得增加一个唯一约束
		2、语法
			在关联的两个类中的任何一个类中：
			属性 = models.OneToOneField(Entry)
		3、查询
			class Wife(models.Model):
				... ...
				author = models.OneToOneField(Author)
			
			正向查询：通过 wife 找 author
				# 获取 id为1 的 Wife的信息
				w = Wife.objects.get(id=1)
				# 再获取 w 的关联的 author
				a = w.author
			反向查询：通过 author 找 wife
				# 获取 id 为1 的 Author 的信息
				a = Author.objects.get(id=1)
				# 再获取 a 的关联的 wife
				w = a.wife

				wife 是由Django通过OneToOneField在Author中默认增加的一个隐式属性

	2、一对多映射
	3、多对多映射
		






