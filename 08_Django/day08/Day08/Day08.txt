1、使用forms模块处理表单
	1、内置小部件
		1、什么是小部件
			小部件(Widget)，表示的是生成到页面中的控件的类型以及其他属性
		2、常用小部件
			1、TextInput : type="text"
			2、NumberInput : type="number"
			3、EmailField : type="email"
			4、URLField : type="url"
			5、PasswordField : type="password"
			6、HiddenInput : type="hidden"
			7、CheckboxInput : type="checkbox"
			8、Textarea : <textarea></textarea>
			9、Select : <select></select>
		3、小部件的使用
			1、继承自 forms.Form
				1、语法：
					1、基本版
						属性 = forms.CharField(
							label = "标签",
							widget = forms.小部件类型
						)

						ex:
						upwd = forms.CharField(
							label='密码',
							widget=forms.PasswordInput
						)
					2、高级版
						属性 = forms.CharField(
							label="标签",
							widget=forms.小部件类型(
								attrs={
									'属性名1':'属性值',
									'属性名2':'属性值',
									... ...
								}
							)
						)
			2、继承自 forms.ModelForm
				class WidgetForm(forms.ModelForm):
					class Meta:
						model=Users
						fields = '__all__' #['属性1','属性2']
						labels = {
							'属性1':'标签1',
							'属性2':'标签2',
						}
						widgets = {
							'属性1':forms.小部件类型(attrs={ ... }),
							'属性2':forms.小部件类型(attrs={ ... }),
						}
2、cookies
	1、什么是cookies
		cookies 是一种数据存储技术
		将一段文本保存在客户端(浏览器)的一种技术,并可以长时间保存
	2、cookies的使用场合
		1、保存登录信息
		2、保存搜索关键词
	3、django 中使用 cookies
		1、设置cookies(将数据保存到客户端)
			语法：
				响应对象.set_cookie(key,value,expires)
				key:cookie的名字
				value:cookie的值
				expires:保存时间，以s为单位
			1、不使用模板
				resp=HttpResponse('给客户端的一句话')
				resp.set_cookie('key','value',expires)
				return resp

				ex:
					resp = HttpResonse('添加Cookie成功')
					resp.set_cookie('uname','zsf',60*60*24*366)
					return resp
			2、使用模板
				resp = render(request,'xxx.html',locals())
				resp.set_cookie(key,value,expires)
				return resp
			3、使用重定向
				resp = HttpResponseRedirect('/地址/')
				resp.set_cookie(key,value,expires)
				return resp

			练习：
				1、完成 fruitday 登录操作
				2、判断手机号 和 密码是否正确
				3、如果正确的话，并且勾选了 记住密码的话，则将登录信息保存进 cookie ，存期为 1 年
		2、获取cookies(将数据从客户端中获取出来)
			request.COOKIES
				封装了当前访问站点下的所有的cookie信息
			练习：
				1、完成fruitday的登录
				2、当用户访问登录路径时
					先判断cookie中是否有登录信息(id,uphone)
					如果包含登录信息的话，则可以直接跳往至首页
					否则 ：显示登录页
3、session - 会话
	1、什么是session
		session(会话)，实际上就是在服务器上为每个浏览器开辟一段空间，用于保存相关的请求信息
	2、session的使用场合
		session也是为了存放数据而存在的。
		通常会把服务器端要经常用到的客户端的数据保存进去
	3、Django中使用session
		1、设置 session 的值
			request.session['key'] = 值
			request.session.set_expiry(time):设置session的过期时间，如果设置为0的话，则表示关闭浏览器session就失效
		2、获取session的值
			request.session.get('key')

		3、删除 session的值
			del request.session['key']
		4、在 settings.py 中，有关 session 的设置
			1、SESSION_COOKIE_AGE
				作用：设置 sessionID 在 cookies 中的存活时间
				ex ：
					SESSION_COOKIE_AGE = 60*30
			2、SESSION_EXPIRE_AT_BROWSER_CLOSE
				作用：设置浏览器关闭则清除服务器上对应的session空间
				ex:
					SESSION_EXPIRE_AT_BROWSER_CLOSE = True








{
	'uid': '1',
	'csrftoken': 'NXJMZ8QvNVvWn1grj2f1IAJDp7S5aU5aGCO9tmrkz2GCkAulRaxqyGe63mwUHk9V', 
	'uphone': '13912345678', 
	'uname1': 'zsf'
}











name = forms.CharField()  --> 
<input type="text" name="name" placeholder="">

upwd = forms.CharField(label="",widget=forms.PasswordInput)