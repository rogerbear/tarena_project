复习 

什么是进程 

进程的状态  就绪  运行   等待

阻塞  wait  waitpid   sleep

ps -aux    ps  -ajx    top   pstree  nice  renice

父子进程

fork()
getpid()  getppid()   exit()   _exit()  wait()  waitpid()

僵尸进程和孤儿进程
++++++++++++++++++++++++++++++++++++++++++++++++++++++
僵尸进程处理方法

3、创建二级子进程处理
4. 在父进程中使用信号处理的方法忽略子进程发来的信号
signal(SIG CHLD,SIG_IGN)

更方便高效的进程创建方法

multiprocessing模块 （标准库模块） 

创建的进程的步骤

1. 将要完成的事件封装成一个个函数
2. 使用multiprocessing提供的接口函数创建进程
3. 使新的进程和指定的函数相关联去完成函数中的工作
4. 对进程进行回收处理

* 函数当付给Process 的target变量后函数内容就是对应进程的进程内容，此时函数才有特殊性
* 多个子进程和父进程之间的执行相互不影响

创建子进程 
Process() 类
参数： target  指定要绑定的函数
       name  给创建的进程起一个名字
			 args  需要一个元组，给target指定的函数按位置传参
			 kwargs 需要给一个字典，给target指定的函数按键值        传参

Process() 类 ----- 》 p  进程对象
属性方法
print("进程名称:",p.name)
print("进程PID:",p.pid)
print('进程状态:',p.is_alive())
			 

启动子进程
start()
* start() 时才真正的创建子进程，而不是Process时创建

回收子进程
join([timeout])
timeout ： 设置最长阻塞时间，如果超过这个时间还没有子进程退出则不再继续等待

* 内核会帮助应用层记录子进程的退出情况，当使用join函数时内核会及时返回进程状态给应用层进行处理


p.daemon 
默认值为False 表示主进程运行结束后 不会影响子进程的运行，直到子进程运行完，进程才会结束

如果设置为True 则主进程运行完毕则所有子进程也不再运行一起退出

* 该属性的设置必须要在start()前
* 该属性的设置并不是 将进程设置为 linux/unix中的守护进程

守护进程： 生命周期长， 与前端控制台无关，后台运行，一般用作系统进程或者自动化运行进程

多进程编程

优点: 可以并行的执行多个任务，提高运行效率
			空间独立，数据安全
			创建方便 

缺点：进程的创建和销毁过程需要消耗较多的计算机资源

在需要频繁的创建和删除较多进程的情况下，资源消耗过多，不适宜使用多进程完成任务

进程池技术

1. 创建进程池 ，在池内放入合适数量的进程
2. 将事件加入进程池的等待队列
3. 使用进程池内的进程不断的执行等待事件
4. 所有事件处理结束后关闭回收进程池

Pool 
功能：创建进程池
参数： processes ：进程池中进程的数量

apply_async() 
功能： 以异步的方式将要执行的事件放入进程池
参数： func ： 要执行的函数
       args ： 给函数按位置传参
			 kwds ： 给函数按照键值传参
返回值 ： 返回事件执行后的返回值对象，可以通过调用get() 函数获取事件函数return的内容

apply()
功能 ： 按照顺序添加要执行的事件，执行一个再添加一个


close() 
功能 ： 关闭进程池，使其不能再加入新的事件

join()
功能：阻塞等待进程池将事件都执行结束后回收进程池

map()
功能 ： 类似与内建函数map 将第二个参数的迭代对象中的数据逐个带入第一个函数作为参数。只不过兼顾了apply_async功能，将函数放入进程池

pool.map(fun,test)   ====> 

for i in test:
	pool.apply_async(fun,(i,))


创建自己的进程类

1. 继承Process类以获取原有的属性
2. 实现自己需要的功能部分
3. 使用自己的类创建进程即可


进程间的通信

不同的进程间进行数据的传输

方法1

文件进行进程间通信 （和磁盘交互慢，数据不安全）

新的进程间通信方式：

管道  消息队列   共享内存   信号   套接字 等

作业 ： 

总结进程中函数的使用方法

对函数的概念进行总结

多逻辑逻辑编程进行练习 
自学 快速排序，用python编程完成快速排序过程









