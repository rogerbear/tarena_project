复习：  什么是进程 
        创建进程  fork  multiprocessing  
				进程池 
				僵尸进程和孤儿进程 
				创建自己的进程类

进程间通信

管道   消息队列   共享内存    信号   套接字
****************************************************

管道

在内存中开辟一个管道空间，对多个进程可见。在通信形式上形成一种约束。

linux  文件类型  
b            c        d        -      l     s    p
跨设备文件  输入设备    目录   普通文件   链接 套接字 管道

multiprocessing  ---》 Pipe 函数

Pipe(duplex)
功能 ： 创建一个管道 
参数 ： duplex 默认为 True  表示管道为双向管道
        如果设置为False 则表示管道为单向管道

返回值 ： 返回两个管道流对象，分别表示管道的两端

				如果参数为True（默认） 两个对象均可发送接收
				如果为False时 则第一个对象只能接收，第二个对象只能发送

* 向管道发送数据使用send()函数,从管道接受数据使用recv()函数
* recv()函数为阻塞函数，当管道中数据为空的时候会阻塞
* 一次recv() 只能接受一次send()的内容
* send()可以发送字符串数字列表等多种类型数据

消息队列  

multiprocessing  --- 》 Queue  

在内存中开辟一个队列模型，用来存放消息。任何拥有队列对象的进程都可以进行消息的存放和取出

Queue(maxsize = 0)
功能 ： 创建一个消息队列对象
参数 ： maxsize  默认为0  表示消息队列可以存放的消息由                  系统自动分配的空间而定
                 > 0 正整数  表示队列中最多存放多少条消息
返回值 ： 消息队列对象

q.put()
向消息队列中存放一条消息，当消息队列满的时候，会阻塞
存放的消息类型可以使数字列表，字串等

q.full()
判断队列是否为满，如果满则返回True 否则返回False

q.qsize()
查看当前队列中消息数量

q.get()
获取消息，每次获取一条，当消息队列为空是，则阻塞

q.empty()
消息队列为空则返回True 不为空返回False

* put  get 中block参数和timeout参数
block 默认为True 表示两个函数都是阻塞函数
      如果设置为False则表示不阻塞

timeout  当block设置为True的时候表示超时等待时间


共享内存

在内存中开辟一段内存空间存储数据，每次存储的内容会覆盖上次的内容。由于没有对内存进行格式化的修饰所以存取速度块效率高

from multiprocessing import Value,Array

obj = Value(ctype,obj)
功能 ： 开辟共享内存
参数 ： ctype  要转变的c的类型
				obj    要写入共享内存的初始值

obj.value 属性为获取共享内存中的值 

obj = Array(ctype,obj)
功能 ： 开辟一个共享内存空间
参数 ： 要转换的c的类型
        obj ： 放入共享内存中的数据，是一个列表，要求列        表中的数据为相同类型数据
								
							 如果obj传入一个正数，则表示在共享内存中开辟一个 多大的空间，空间中可以存放的数值类型 由ctype确定

返回值：返回一个可迭代对象通过for循环取值，可以进行修改


           管道         消息队列         共享内存 
开辟空间   内存中       内存中           内存中

读写方式   可双向/单项   先进显出        操作内存
                         按照个数存储
效率       一般          一般            较快

是否需要   不需要        不需要           需要
同步互斥


信号 ： 

kill -l  查看系统信号
kill  -signame  PID  给进程号PID的进程发送signame信号

信号 ： 信号名称     含义     默认处理方法

名称 ： 系统定义 
含义 ： 系统定义
处理方式 ： 采用默认方式处理 （系统定义 终止 暂停 忽略
            忽略信号（当信号没发生过）
						采用自定义的方式处理

如何发送信号：
os.kill(pid,sig)
功能 ： 向一个进程发送一个信号
参数 ： pid ：要发送进程的PID号
        sig ：要发送的信号

signal.alarm(sec) 
功能：给自己发送一个时钟信号 （SIGALRM）
参数： sec ： 秒数 表示在相应的秒数后发送时钟信号

* 信号是一种异步的进程间通信方式
* alarm 函数在一个进程中如果使用多次，则后面的时钟时间会覆盖前面的时间

信号的处理：

signal.pause() 
阻塞等待一个信号的发生

signal.signal(signum,handler)
功能 ： 处理信号
参数 ： signum ： 表示可以处理的信号
        handler ： 信号的处理方法

				           默认处理方式 ： SIG_DFL
									 忽略信号     ： SIG_IGN
									 自定义的方式 ： function

* signal函数也是一个异步处理信号函数
* SIGSTOP 和 SIGKILL不能被signal函数处理

僵尸进程的信号处理方案 父进程中
signal(SIGCHLD,SIG_IGN)


同步和互斥 

临界资源 ： 对多个进程或者线程都可见的资源，容易产生争夺，我们将这类资源称为临界资源

临界区 ： 对临界资源进行操作的代码区域称之为临界区

解决资源争夺： 同步   或者  互斥

同步 ： 同步是一种合作关系，为完成某种任务而建立的多个进程或者线程之间的协调调用，次序等待，传递消息告知资源占用情况

互斥 ： 互斥是一种制约关系，当一个进程或者线程进入到临界区后会进行枷锁操作，此时其他进程（线程）无法进如临界区，只有当该进程（线程）使用后进行解锁，其他人才可以使用。这种技术往往是通过阻塞完成

Event 事件

Event 函数
具体函数见程序

作业：
售票员和司机的故事

1. 创建父子进程，分别表示司机和售票员

2. 当售票员捕捉到 SIGINT信号时 给司机发送SIGUSR1信号，    司机打印“老司机开车了”
		
	当售票员捕捉到 SIGQUIT信号时 给司机发送SIGUSR2信号， 司机打印“系好安全带，小心甩出去”

	当司机捕捉到 SIGTSTP信号时 给售票员发送SIGUSR1信号， 售票员打印“到站了，下车吧”

3. 到站后 售票员先下车（子进程先退出），然后司机下车
	


